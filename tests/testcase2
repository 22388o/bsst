1 DEPTH DEPTH 3 EQUALVERIFY 2 EQUALVERIFY ADD

SIZE 0 EQUALVERIFY DUP CAT DUP CAT DUP CAT DUP CAT DUP CAT DUP CAT DUP CAT DUP CAT DUP CAT SIZE 0 NUMEQUALVERIFY


DUP 2 RIGHT 'B' SWAP CAT SWAP 'ABCD' EQUALVERIFY 'BCD' EQUAL


DUP 2 3 SUBSTR 'F' CAT SWAP 2 RIGHT 'CDE' EQUALVERIFY 'CD' 'EF' CAT EQUAL

DUP 6 RSHIFT SWAP 134 EQUALVERIFY 2 NUMEQUAL
DUP 6 RSHIFT SWAP 4104 EQUALVERIFY x('40') EQUAL
DUP 6 RSHIFT SWAP 4104 NUMEQUALVERIFY 64 NUMEQUAL
DUP 0 RSHIFT SWAP x('0000') EQUALVERIFY 0 EQUAL
DUP 0 RSHIFT SWAP x('0100') EQUALVERIFY 1 EQUAL
DUP 8 RSHIFT SWAP x('0100') EQUALVERIFY 0 EQUAL
DUP 16 RSHIFT SWAP x('000010') EQUALVERIFY 16 EQUAL
DUP 32 RSHIFT SWAP x('00000000120000') EQUALVERIFY 18 EQUAL
DUP 30 RSHIFT SWAP x('00000000120000') EQUALVERIFY 72 EQUAL
DUP 17 RSHIFT SWAP x('000010') EQUALVERIFY 8 EQUAL
DUP 11 RSHIFT SWAP x('0010') EQUALVERIFY 2 EQUAL

DUP 6 LSHIFT SWAP 34 EQUALVERIFY 2176 EQUAL
DUP 18 LSHIFT SWAP x('860000') EQUALVERIFY 35127296 NUMEQUAL
DUP 9 LSHIFT SWAP x('8680') EQUALVERIFY 16845824 NUMEQUAL
DUP 8 LSHIFT SWAP x('8600') EQUALVERIFY -1536 NUMEQUAL
DUP 8 LSHIFT SWAP x('86') EQUALVERIFY -1536 NUMEQUAL
DUP 8 LSHIFT SWAP 2 EQUALVERIFY 512 NUMEQUAL
DUP 11 LSHIFT SWAP x('008000') EQUALVERIFY 67108864 EQUAL
DUP 0 LSHIFT SWAP x('0000') EQUALVERIFY 0 EQUAL
DUP 0 LSHIFT SWAP x('0100') EQUALVERIFY 1 EQUAL

DUP INVERT SWAP 85 EQUALVERIFY 170 EQUAL
DUP INVERT SWAP 84 NUMEQUALVERIFY 171 NUMEQUAL
DUP INVERT SWAP x('aaaa00') EQUALVERIFY x('5555ff') EQUAL

DUP x('99') XOR SWAP x('23') EQUALVERIFY x('ba') EQUAL
DUP x('5511FF99') XOR SWAP x('22758399') EQUALVERIFY 8152183 NUMEQUAL
DUP x('5511FF99') XOR SWAP x('22758390') EQUALVERIFY x('77647c09') EQUAL
DUP x('5511FF99') XOR SWAP x('5511FF99') EQUALVERIFY x('00000000') EQUAL
DUP x('5511FF99') AND SWAP x('22758399') EQUALVERIFY x('00118399') EQUAL
DUP x('99') AND SWAP x('23') EQUALVERIFY 1 EQUAL
DUP x('99') OR SWAP x('23') EQUALVERIFY x('bb') EQUAL
DUP x('5511FF99') OR SWAP x('22758399') EQUALVERIFY x('7775ff99') EQUAL

2DUP HASH256 SWAP HASH256 EQUALVERIFY EQUAL
2DUP HASH256 SWAP HASH256 EQUAL NOT VERIFY EQUAL NOT
2DUP SHA1 SWAP SHA1 EQUAL NOT VERIFY EQUAL NOT

// only in non-tapscript (ecdsa sig)
SIZE 32 NUMEQUALVERIFY SWAP SIZE 50 NUMEQUALVERIFY x('3033020a') SWAP CAT SWAP x('02') SWAP CAT CHECKSIG

DUP x('00') SWAP CAT SWAP x('0080') EQUALVERIFY IFDUP x('000080') XOR 0 RSHIFT NOT
DUP x('00') SWAP CAT SWAP x('0080') XOR 0 RSHIFT NOT VERIFY IFDUP x('000080') XOR 0 RSHIFT NOT

// only in non-tapscript (non-minimal arg for IF)
DUP x('00') SWAP CAT SWAP x('0080') EQUALVERIFY DUP IF DUP ENDIF x('000080') XOR 0 RSHIFT NOT

// must fail with track_tx_output_fields=True
DUP INSPECTOUTPUTNONCE 1 INSPECTOUTPUTNONCE EQUAL SWAP 1 EQUALVERIFY NOT

3DUP DUP 'AA' EQUALVERIFY SHA256INITIALIZE SIZE 42 EQUALVERIFY SWAP SHA256UPDATE SIZE 45 EQUALVERIFY SWAP SHA256FINALIZE TOALTSTACK DROP 'BBB' EQUALVERIFY 'CCCC' EQUALVERIFY DROP DROP FROMALTSTACK

// Invalid arguments, result will be out of bounds
x('FFFFFFFFFFFFFF7F') 1 SCRIPTNUMTOLE64 ADD64 VERIFY

// fails: int64 overflow
DUP SCRIPTNUMTOLE64 x('FFFFFFFFFFFFFF7F') ADD64 VERIFY SWAP 1 NUMEQUALVERIFY
DUP SCRIPTNUMTOLE64 x('0000000000000080') SUB64 VERIFY SWAP 1 NUMEQUALVERIFY
DUP SCRIPTNUMTOLE64 x('0000000000000080') MUL64 VERIFY SWAP 2 NUMEQUALVERIFY
DUP DUP MUL64 VERIFY SWAP x('FFFFFFF000000000') EQUALVERIFY
DUP DUP ADD64 VERIFY SWAP x('FFFFFFFFFFFFFF7F') EQUALVERIFY
DUP DUP ADD64 VERIFY SWAP x('0000000000000080') EQUALVERIFY
DUP x('0000000000000080') SUB64 VERIFY SWAP 0 SCRIPTNUMTOLE64 EQUALVERIFY

DUP x('0100000000000080') SUB64 VERIFY SWAP 0 SCRIPTNUMTOLE64 EQUALVERIFY x('FFFFFFFFFFFFFF7F') EQUAL
INSPECTVERSION LE32TOLE64 LE64TOSCRIPTNUM 1 EQUALVERIFY INSPECTVERSION x('01000000') EQUAL 

// EQUAL(wit2, wit1) @ 2:L1 must be reported as always-true
IF 2DUP EQUALVERIFY 1 EQUALVERIFY 1 EQUALVERIFY ELSE EQUALVERIFY ENDIF
// no always-true
IF 2DUP EQUALVERIFY 1 EQUALVERIFY 1 EQUAL ELSE EQUALVERIFY ENDIF

// EQUAL(wit2, wit1) @ 6:L1 must be reported as always-true
IF 2DUP 1 EQUALVERIFY 1 EQUALVERIFY EQUALVERIFY ENDIF EQUALVERIFY

// EQUAL(wit2, wit1) must be reported as <*> in "IF wit0 @ 0:L1 : True" path
// if mark_path_local_always_true_enforcements is True
// (other two enforcements must be reported as always-true)
IF 2DUP 1 EQUALVERIFY 1 EQUALVERIFY ENDIF EQUALVERIFY

// both enforcements must be reported as always-true
1 EQUAL DUP 1 EQUALVERIFY VERIFY

IFDUP NOTIF 1 EQUALVERIFY ENDIF EQUAL

0 INSPECTOUTPUTVALUE 1 EQUALVERIFY x('0a00000000000700') MUL64 1 EQUALVERIFY
0 INSPECTOUTPUTVALUE 1 EQUALVERIFY x('0a00000000000700') MUL64 1 EQUALVERIFY
0 INSPECTOUTPUTVALUE 1 EQUALVERIFY x('0a00000000000000') MUL64 1 EQUALVERIFY
0 INSPECTOUTPUTVALUE 1 EQUALVERIFY DUP x('0a00000000000100') EQUALVERIFY x('0a00100000000000') MUL64 1 NUMEQUALVERIFY

DUP 10 GREATERTHAN IF 10 GREATERTHAN VERIFY ENDIF

SIZE 32 NUMEQUALVERIFY 0 INSPECTOUTPUTSCRIPTPUBKEY -1 NUMEQUALVERIFY EQUALVERIFY

// check 0-value output rules
DUP INSPECTOUTPUTVALUE 1 EQUALVERIFY LE64TOSCRIPTNUM 0 EQUALVERIFY INSPECTOUTPUTSCRIPTPUBKEY SWAP SIZE 0 NUMNOTEQUAL VERIFY SIZE 1000 LESSTHAN VERIFY x('6a') EQUALVERIFY -1 NUMEQUALVERIFY
// shold fail at x('5a') EQUALVERIFY
DUP INSPECTOUTPUTVALUE 1 EQUALVERIFY LE64TOSCRIPTNUM 0 EQUALVERIFY INSPECTOUTPUTSCRIPTPUBKEY SWAP SIZE 0 NUMNOTEQUAL VERIFY SIZE 1000 LESSTHAN VERIFY x('5a') EQUALVERIFY -1 NUMEQUALVERIFY
// shold fail at 0 NUMEQUALVERIFY
DUP INSPECTOUTPUTVALUE 1 EQUALVERIFY LE64TOSCRIPTNUM 0 EQUALVERIFY INSPECTOUTPUTSCRIPTPUBKEY SWAP SIZE 0 NUMNOTEQUAL VERIFY SIZE 1000 LESSTHAN VERIFY x('6a') EQUALVERIFY 0 NUMEQUALVERIFY

// should report warning "warn_5bytes_scriptnum_possible"
DUP CHECKLOCKTIMEVERIFY 1 NUMEQUAL

mul64 1 equalverify

MUL64 TOALTSTACK ADD64 FROMALTSTACK VERIFY

DUP DUP VERIFY IF VERIFY ELSE 2 ENDIF

// low_s check static
0x304502203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022100ab1e3da73d67e32045a20e0b999e049978ea8d6ee5480d485fcf2ce0d03b2ef001 0x03d8bd1a69a1337d2817cfc0fecc3247436b34903d7ae424316354b73114dcb1dd CHECKSIG
0x304402203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c02207FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A101 0x03d8bd1a69a1337d2817cfc0fecc3247436b34903d7ae424316354b73114dcb1dd CHECKSIG

// low_s check z3
DUP 0x03d8bd1a69a1337d2817cfc0fecc3247436b34903d7ae424316354b73114dcb1dd CHECKSIG SWAP 0x304502203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022100ab1e3da73d67e32045a20e0b999e049978ea8d6ee5480d485fcf2ce0d03b2ef001 EQUALVERIFY
DUP 0x03d8bd1a69a1337d2817cfc0fecc3247436b34903d7ae424316354b73114dcb1dd CHECKSIG SWAP 0x304402203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c02207FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A101 EQUALVERIFY

// must fail with z3
DUP 0 BOOLOR SWAP 0 EQUALVERIFY
